异或运算的性质：

1.任何数和0异或都等于它本身
2.任何数和它本身异或都等于0
3.任何数和同一个数异或两次，相当于没有和这个数异或过

假设我们用0，从头到尾依次异或数组中的每个数字，那么最终的结果刚好是那个仅仅
出现一次的数字，因为那些出现两次的数字所有在异或中抵消掉了。


例1：

给定大小是N的数组，数组里的元素互相不反复，元素的大小范围是1～(N+1),目标是找
出第一个miss的数。要求时间复杂度O(N),空间是O(1).

解析：由于这个数组总共仅仅有N 个元素，因此在1--N+1中必然有一个数不存在.设
res=0,使用异或操作,先让res和下标+1异或,然后同每个数异或。当中出现两次的数刚好
异或为0，剩下的则是结果。

代码：
int Solution(vector<int>& nums){
	int res = 0;
	int max = nums.size();
	if(max == 0){
		return 1;
	}
	
	for(int i = 0;i < max;i++){
		res^=(i+1);
		if(nums[i] <= max){
			res^=nums[i];
		}
	}
	
	return res==0?max+1:res;
}